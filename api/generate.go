// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"encoding/json"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Defines values for ChatCompletionChoiceFinishReason.
const (
	ChatCompletionChoiceFinishReasonContentFilter ChatCompletionChoiceFinishReason = "content_filter"
	ChatCompletionChoiceFinishReasonFunctionCall  ChatCompletionChoiceFinishReason = "function_call"
	ChatCompletionChoiceFinishReasonLength        ChatCompletionChoiceFinishReason = "length"
	ChatCompletionChoiceFinishReasonStop          ChatCompletionChoiceFinishReason = "stop"
	ChatCompletionChoiceFinishReasonToolCalls     ChatCompletionChoiceFinishReason = "tool_calls"
)

// Defines values for ChatCompletionRequestFunctionCall0.
const (
	Auto ChatCompletionRequestFunctionCall0 = "auto"
	None ChatCompletionRequestFunctionCall0 = "none"
)

// Defines values for ChatMessageRole.
const (
	ChatMessageRoleAssistant ChatMessageRole = "assistant"
	ChatMessageRoleFunction  ChatMessageRole = "function"
	ChatMessageRoleSystem    ChatMessageRole = "system"
	ChatMessageRoleTool      ChatMessageRole = "tool"
	ChatMessageRoleUser      ChatMessageRole = "user"
)

// Defines values for MessageContentPartType.
const (
	ImageUrl MessageContentPartType = "image_url"
	Text     MessageContentPartType = "text"
)

// Defines values for ToolCallType.
const (
	ToolCallTypeFunction ToolCallType = "function"
)

// ChatCompletionChoice defines model for ChatCompletionChoice.
type ChatCompletionChoice struct {
	FinishReason ChatCompletionChoiceFinishReason `json:"finish_reason"`
	Index        int                              `json:"index"`
	Message      ChatMessage                      `json:"message"`
}

// ChatCompletionChoiceFinishReason defines model for ChatCompletionChoice.FinishReason.
type ChatCompletionChoiceFinishReason string

// ChatCompletionRequest defines model for ChatCompletionRequest.
type ChatCompletionRequest struct {
	// FrequencyPenalty Penalize frequent tokens.
	FrequencyPenalty *float32 `json:"frequency_penalty,omitempty"`

	// FunctionCall Force or guide function selection.
	FunctionCall *ChatCompletionRequest_FunctionCall `json:"function_call,omitempty"`

	// Functions Tool definitions (function calling).
	Functions *[]FunctionDefinition `json:"functions,omitempty"`

	// LogitBias Modify probability of specific tokens.
	LogitBias *map[string]int `json:"logit_bias,omitempty"`

	// MaxTokens Maximum number of tokens to generate.
	MaxTokens *int `json:"max_tokens,omitempty"`

	// Messages The conversation so far.
	Messages []ChatMessage `json:"messages"`

	// Model ID of the model to use.
	Model string `json:"model"`

	// N Number of completions to generate.
	N *int `json:"n,omitempty"`

	// PresencePenalty Penalize new topic tokens.
	PresencePenalty *float32 `json:"presence_penalty,omitempty"`

	// Stop Sequences where the API will stop generating further tokens.
	Stop *ChatCompletionRequest_Stop `json:"stop,omitempty"`

	// Stream Whether to stream back results.
	Stream *bool `json:"stream,omitempty"`

	// Temperature Sampling temperature to use.
	Temperature *float32 `json:"temperature,omitempty"`

	// TopP Nucleus sampling probability.
	TopP *float32 `json:"top_p,omitempty"`

	// User A unique identifier representing your end-user.
	User *string `json:"user,omitempty"`
}

// ChatCompletionRequestFunctionCall0 defines model for ChatCompletionRequest.FunctionCall.0.
type ChatCompletionRequestFunctionCall0 string

// ChatCompletionRequestFunctionCall1 defines model for .
type ChatCompletionRequestFunctionCall1 struct {
	Name string `json:"name"`
}

// ChatCompletionRequest_FunctionCall Force or guide function selection.
type ChatCompletionRequest_FunctionCall struct {
	union json.RawMessage
}

// ChatCompletionRequestStop0 defines model for .
type ChatCompletionRequestStop0 = string

// ChatCompletionRequestStop1 defines model for .
type ChatCompletionRequestStop1 = []string

// ChatCompletionRequest_Stop Sequences where the API will stop generating further tokens.
type ChatCompletionRequest_Stop struct {
	union json.RawMessage
}

// ChatCompletionResponse defines model for ChatCompletionResponse.
type ChatCompletionResponse struct {
	Choices []ChatCompletionChoice `json:"choices"`
	Created int                    `json:"created"`
	Id      string                 `json:"id"`
	Model   string                 `json:"model"`
	Object  string                 `json:"object"`
	Usage   *Usage                 `json:"usage,omitempty"`
}

// ChatMessage defines model for ChatMessage.
type ChatMessage struct {
	Content      *ChatMessage_Content `json:"content,omitempty"`
	FunctionCall *FunctionCall        `json:"function_call,omitempty"`

	// Name Optional name for function/tool messages.
	Name *string         `json:"name,omitempty"`
	Role ChatMessageRole `json:"role"`

	// ToolCallId Tool call this message responds to (if role=tool).
	ToolCallId *string     `json:"tool_call_id,omitempty"`
	ToolCalls  *[]ToolCall `json:"tool_calls,omitempty"`
}

// ChatMessageContent0 defines model for .
type ChatMessageContent0 = string

// ChatMessageContent1 defines model for .
type ChatMessageContent1 = []MessageContentPart

// ChatMessage_Content defines model for ChatMessage.Content.
type ChatMessage_Content struct {
	union json.RawMessage
}

// ChatMessageRole defines model for ChatMessage.Role.
type ChatMessageRole string

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error struct {
		Code    *string `json:"code"`
		Message string  `json:"message"`
		Param   *string `json:"param"`
		Type    string  `json:"type"`
	} `json:"error"`
}

// FunctionCall defines model for FunctionCall.
type FunctionCall struct {
	// Arguments JSON string of arguments
	Arguments string `json:"arguments"`
	Name      string `json:"name"`
}

// FunctionDefinition defines model for FunctionDefinition.
type FunctionDefinition struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`

	// Parameters JSON Schema defining the function parameters.
	Parameters map[string]interface{} `json:"parameters"`
}

// MessageContentPart defines model for MessageContentPart.
type MessageContentPart struct {
	ImageUrl *struct {
		Url string `json:"url"`
	} `json:"image_url,omitempty"`
	Text *string                `json:"text,omitempty"`
	Type MessageContentPartType `json:"type"`
}

// MessageContentPartType defines model for MessageContentPart.Type.
type MessageContentPartType string

// ToolCall defines model for ToolCall.
type ToolCall struct {
	Function FunctionCall `json:"function"`
	Id       string       `json:"id"`
	Type     ToolCallType `json:"type"`
}

// ToolCallType defines model for ToolCall.Type.
type ToolCallType string

// Usage defines model for Usage.
type Usage struct {
	CompletionTokens int `json:"completion_tokens"`
	PromptTokens     int `json:"prompt_tokens"`
	TotalTokens      int `json:"total_tokens"`
}

// CreateChatCompletionJSONRequestBody defines body for CreateChatCompletion for application/json ContentType.
type CreateChatCompletionJSONRequestBody = ChatCompletionRequest

// AsChatCompletionRequestFunctionCall0 returns the union data inside the ChatCompletionRequest_FunctionCall as a ChatCompletionRequestFunctionCall0
func (t ChatCompletionRequest_FunctionCall) AsChatCompletionRequestFunctionCall0() (ChatCompletionRequestFunctionCall0, error) {
	var body ChatCompletionRequestFunctionCall0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChatCompletionRequestFunctionCall0 overwrites any union data inside the ChatCompletionRequest_FunctionCall as the provided ChatCompletionRequestFunctionCall0
func (t *ChatCompletionRequest_FunctionCall) FromChatCompletionRequestFunctionCall0(v ChatCompletionRequestFunctionCall0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChatCompletionRequestFunctionCall0 performs a merge with any union data inside the ChatCompletionRequest_FunctionCall, using the provided ChatCompletionRequestFunctionCall0
func (t *ChatCompletionRequest_FunctionCall) MergeChatCompletionRequestFunctionCall0(v ChatCompletionRequestFunctionCall0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsChatCompletionRequestFunctionCall1 returns the union data inside the ChatCompletionRequest_FunctionCall as a ChatCompletionRequestFunctionCall1
func (t ChatCompletionRequest_FunctionCall) AsChatCompletionRequestFunctionCall1() (ChatCompletionRequestFunctionCall1, error) {
	var body ChatCompletionRequestFunctionCall1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChatCompletionRequestFunctionCall1 overwrites any union data inside the ChatCompletionRequest_FunctionCall as the provided ChatCompletionRequestFunctionCall1
func (t *ChatCompletionRequest_FunctionCall) FromChatCompletionRequestFunctionCall1(v ChatCompletionRequestFunctionCall1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChatCompletionRequestFunctionCall1 performs a merge with any union data inside the ChatCompletionRequest_FunctionCall, using the provided ChatCompletionRequestFunctionCall1
func (t *ChatCompletionRequest_FunctionCall) MergeChatCompletionRequestFunctionCall1(v ChatCompletionRequestFunctionCall1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ChatCompletionRequest_FunctionCall) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ChatCompletionRequest_FunctionCall) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsChatCompletionRequestStop0 returns the union data inside the ChatCompletionRequest_Stop as a ChatCompletionRequestStop0
func (t ChatCompletionRequest_Stop) AsChatCompletionRequestStop0() (ChatCompletionRequestStop0, error) {
	var body ChatCompletionRequestStop0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChatCompletionRequestStop0 overwrites any union data inside the ChatCompletionRequest_Stop as the provided ChatCompletionRequestStop0
func (t *ChatCompletionRequest_Stop) FromChatCompletionRequestStop0(v ChatCompletionRequestStop0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChatCompletionRequestStop0 performs a merge with any union data inside the ChatCompletionRequest_Stop, using the provided ChatCompletionRequestStop0
func (t *ChatCompletionRequest_Stop) MergeChatCompletionRequestStop0(v ChatCompletionRequestStop0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsChatCompletionRequestStop1 returns the union data inside the ChatCompletionRequest_Stop as a ChatCompletionRequestStop1
func (t ChatCompletionRequest_Stop) AsChatCompletionRequestStop1() (ChatCompletionRequestStop1, error) {
	var body ChatCompletionRequestStop1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChatCompletionRequestStop1 overwrites any union data inside the ChatCompletionRequest_Stop as the provided ChatCompletionRequestStop1
func (t *ChatCompletionRequest_Stop) FromChatCompletionRequestStop1(v ChatCompletionRequestStop1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChatCompletionRequestStop1 performs a merge with any union data inside the ChatCompletionRequest_Stop, using the provided ChatCompletionRequestStop1
func (t *ChatCompletionRequest_Stop) MergeChatCompletionRequestStop1(v ChatCompletionRequestStop1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ChatCompletionRequest_Stop) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ChatCompletionRequest_Stop) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsChatMessageContent0 returns the union data inside the ChatMessage_Content as a ChatMessageContent0
func (t ChatMessage_Content) AsChatMessageContent0() (ChatMessageContent0, error) {
	var body ChatMessageContent0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChatMessageContent0 overwrites any union data inside the ChatMessage_Content as the provided ChatMessageContent0
func (t *ChatMessage_Content) FromChatMessageContent0(v ChatMessageContent0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChatMessageContent0 performs a merge with any union data inside the ChatMessage_Content, using the provided ChatMessageContent0
func (t *ChatMessage_Content) MergeChatMessageContent0(v ChatMessageContent0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsChatMessageContent1 returns the union data inside the ChatMessage_Content as a ChatMessageContent1
func (t ChatMessage_Content) AsChatMessageContent1() (ChatMessageContent1, error) {
	var body ChatMessageContent1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChatMessageContent1 overwrites any union data inside the ChatMessage_Content as the provided ChatMessageContent1
func (t *ChatMessage_Content) FromChatMessageContent1(v ChatMessageContent1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChatMessageContent1 performs a merge with any union data inside the ChatMessage_Content, using the provided ChatMessageContent1
func (t *ChatMessage_Content) MergeChatMessageContent1(v ChatMessageContent1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ChatMessage_Content) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ChatMessage_Content) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates a model response for the given chat conversation.
	// (POST /chat/completions)
	CreateChatCompletion(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// CreateChatCompletion operation middleware
func (siw *ServerInterfaceWrapper) CreateChatCompletion(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateChatCompletion(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/chat/completions", wrapper.CreateChatCompletion)
}
