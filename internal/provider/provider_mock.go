// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package provider

//go:generate minimock -i github.com/dmitrii/llm-gateway/internal/provider.Provider -o provider_mock.go -n ProviderMock -p provider

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/dmitrii/llm-gateway/internal/types"
	"github.com/gojuno/minimock/v3"
	"github.com/openai/openai-go"
)

// ProviderMock implements Provider
type ProviderMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcChatCompletion          func(ctx context.Context, req *openai.ChatCompletionNewParams) (cp1 *types.ChatCompletionResponse, err error)
	funcChatCompletionOrigin    string
	inspectFuncChatCompletion   func(ctx context.Context, req *openai.ChatCompletionNewParams)
	afterChatCompletionCounter  uint64
	beforeChatCompletionCounter uint64
	ChatCompletionMock          mProviderMockChatCompletion
}

// NewProviderMock returns a mock for Provider
func NewProviderMock(t minimock.Tester) *ProviderMock {
	m := &ProviderMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ChatCompletionMock = mProviderMockChatCompletion{mock: m}
	m.ChatCompletionMock.callArgs = []*ProviderMockChatCompletionParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mProviderMockChatCompletion struct {
	optional           bool
	mock               *ProviderMock
	defaultExpectation *ProviderMockChatCompletionExpectation
	expectations       []*ProviderMockChatCompletionExpectation

	callArgs []*ProviderMockChatCompletionParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ProviderMockChatCompletionExpectation specifies expectation struct of the Provider.ChatCompletion
type ProviderMockChatCompletionExpectation struct {
	mock               *ProviderMock
	params             *ProviderMockChatCompletionParams
	paramPtrs          *ProviderMockChatCompletionParamPtrs
	expectationOrigins ProviderMockChatCompletionExpectationOrigins
	results            *ProviderMockChatCompletionResults
	returnOrigin       string
	Counter            uint64
}

// ProviderMockChatCompletionParams contains parameters of the Provider.ChatCompletion
type ProviderMockChatCompletionParams struct {
	ctx context.Context
	req *openai.ChatCompletionNewParams
}

// ProviderMockChatCompletionParamPtrs contains pointers to parameters of the Provider.ChatCompletion
type ProviderMockChatCompletionParamPtrs struct {
	ctx *context.Context
	req **openai.ChatCompletionNewParams
}

// ProviderMockChatCompletionResults contains results of the Provider.ChatCompletion
type ProviderMockChatCompletionResults struct {
	cp1 *types.ChatCompletionResponse
	err error
}

// ProviderMockChatCompletionOrigins contains origins of expectations of the Provider.ChatCompletion
type ProviderMockChatCompletionExpectationOrigins struct {
	origin    string
	originCtx string
	originReq string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmChatCompletion *mProviderMockChatCompletion) Optional() *mProviderMockChatCompletion {
	mmChatCompletion.optional = true
	return mmChatCompletion
}

// Expect sets up expected params for Provider.ChatCompletion
func (mmChatCompletion *mProviderMockChatCompletion) Expect(ctx context.Context, req *openai.ChatCompletionNewParams) *mProviderMockChatCompletion {
	if mmChatCompletion.mock.funcChatCompletion != nil {
		mmChatCompletion.mock.t.Fatalf("ProviderMock.ChatCompletion mock is already set by Set")
	}

	if mmChatCompletion.defaultExpectation == nil {
		mmChatCompletion.defaultExpectation = &ProviderMockChatCompletionExpectation{}
	}

	if mmChatCompletion.defaultExpectation.paramPtrs != nil {
		mmChatCompletion.mock.t.Fatalf("ProviderMock.ChatCompletion mock is already set by ExpectParams functions")
	}

	mmChatCompletion.defaultExpectation.params = &ProviderMockChatCompletionParams{ctx, req}
	mmChatCompletion.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmChatCompletion.expectations {
		if minimock.Equal(e.params, mmChatCompletion.defaultExpectation.params) {
			mmChatCompletion.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmChatCompletion.defaultExpectation.params)
		}
	}

	return mmChatCompletion
}

// ExpectCtxParam1 sets up expected param ctx for Provider.ChatCompletion
func (mmChatCompletion *mProviderMockChatCompletion) ExpectCtxParam1(ctx context.Context) *mProviderMockChatCompletion {
	if mmChatCompletion.mock.funcChatCompletion != nil {
		mmChatCompletion.mock.t.Fatalf("ProviderMock.ChatCompletion mock is already set by Set")
	}

	if mmChatCompletion.defaultExpectation == nil {
		mmChatCompletion.defaultExpectation = &ProviderMockChatCompletionExpectation{}
	}

	if mmChatCompletion.defaultExpectation.params != nil {
		mmChatCompletion.mock.t.Fatalf("ProviderMock.ChatCompletion mock is already set by Expect")
	}

	if mmChatCompletion.defaultExpectation.paramPtrs == nil {
		mmChatCompletion.defaultExpectation.paramPtrs = &ProviderMockChatCompletionParamPtrs{}
	}
	mmChatCompletion.defaultExpectation.paramPtrs.ctx = &ctx
	mmChatCompletion.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmChatCompletion
}

// ExpectReqParam2 sets up expected param req for Provider.ChatCompletion
func (mmChatCompletion *mProviderMockChatCompletion) ExpectReqParam2(req *openai.ChatCompletionNewParams) *mProviderMockChatCompletion {
	if mmChatCompletion.mock.funcChatCompletion != nil {
		mmChatCompletion.mock.t.Fatalf("ProviderMock.ChatCompletion mock is already set by Set")
	}

	if mmChatCompletion.defaultExpectation == nil {
		mmChatCompletion.defaultExpectation = &ProviderMockChatCompletionExpectation{}
	}

	if mmChatCompletion.defaultExpectation.params != nil {
		mmChatCompletion.mock.t.Fatalf("ProviderMock.ChatCompletion mock is already set by Expect")
	}

	if mmChatCompletion.defaultExpectation.paramPtrs == nil {
		mmChatCompletion.defaultExpectation.paramPtrs = &ProviderMockChatCompletionParamPtrs{}
	}
	mmChatCompletion.defaultExpectation.paramPtrs.req = &req
	mmChatCompletion.defaultExpectation.expectationOrigins.originReq = minimock.CallerInfo(1)

	return mmChatCompletion
}

// Inspect accepts an inspector function that has same arguments as the Provider.ChatCompletion
func (mmChatCompletion *mProviderMockChatCompletion) Inspect(f func(ctx context.Context, req *openai.ChatCompletionNewParams)) *mProviderMockChatCompletion {
	if mmChatCompletion.mock.inspectFuncChatCompletion != nil {
		mmChatCompletion.mock.t.Fatalf("Inspect function is already set for ProviderMock.ChatCompletion")
	}

	mmChatCompletion.mock.inspectFuncChatCompletion = f

	return mmChatCompletion
}

// Return sets up results that will be returned by Provider.ChatCompletion
func (mmChatCompletion *mProviderMockChatCompletion) Return(cp1 *types.ChatCompletionResponse, err error) *ProviderMock {
	if mmChatCompletion.mock.funcChatCompletion != nil {
		mmChatCompletion.mock.t.Fatalf("ProviderMock.ChatCompletion mock is already set by Set")
	}

	if mmChatCompletion.defaultExpectation == nil {
		mmChatCompletion.defaultExpectation = &ProviderMockChatCompletionExpectation{mock: mmChatCompletion.mock}
	}
	mmChatCompletion.defaultExpectation.results = &ProviderMockChatCompletionResults{cp1, err}
	mmChatCompletion.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmChatCompletion.mock
}

// Set uses given function f to mock the Provider.ChatCompletion method
func (mmChatCompletion *mProviderMockChatCompletion) Set(f func(ctx context.Context, req *openai.ChatCompletionNewParams) (cp1 *types.ChatCompletionResponse, err error)) *ProviderMock {
	if mmChatCompletion.defaultExpectation != nil {
		mmChatCompletion.mock.t.Fatalf("Default expectation is already set for the Provider.ChatCompletion method")
	}

	if len(mmChatCompletion.expectations) > 0 {
		mmChatCompletion.mock.t.Fatalf("Some expectations are already set for the Provider.ChatCompletion method")
	}

	mmChatCompletion.mock.funcChatCompletion = f
	mmChatCompletion.mock.funcChatCompletionOrigin = minimock.CallerInfo(1)
	return mmChatCompletion.mock
}

// When sets expectation for the Provider.ChatCompletion which will trigger the result defined by the following
// Then helper
func (mmChatCompletion *mProviderMockChatCompletion) When(ctx context.Context, req *openai.ChatCompletionNewParams) *ProviderMockChatCompletionExpectation {
	if mmChatCompletion.mock.funcChatCompletion != nil {
		mmChatCompletion.mock.t.Fatalf("ProviderMock.ChatCompletion mock is already set by Set")
	}

	expectation := &ProviderMockChatCompletionExpectation{
		mock:               mmChatCompletion.mock,
		params:             &ProviderMockChatCompletionParams{ctx, req},
		expectationOrigins: ProviderMockChatCompletionExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmChatCompletion.expectations = append(mmChatCompletion.expectations, expectation)
	return expectation
}

// Then sets up Provider.ChatCompletion return parameters for the expectation previously defined by the When method
func (e *ProviderMockChatCompletionExpectation) Then(cp1 *types.ChatCompletionResponse, err error) *ProviderMock {
	e.results = &ProviderMockChatCompletionResults{cp1, err}
	return e.mock
}

// Times sets number of times Provider.ChatCompletion should be invoked
func (mmChatCompletion *mProviderMockChatCompletion) Times(n uint64) *mProviderMockChatCompletion {
	if n == 0 {
		mmChatCompletion.mock.t.Fatalf("Times of ProviderMock.ChatCompletion mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmChatCompletion.expectedInvocations, n)
	mmChatCompletion.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmChatCompletion
}

func (mmChatCompletion *mProviderMockChatCompletion) invocationsDone() bool {
	if len(mmChatCompletion.expectations) == 0 && mmChatCompletion.defaultExpectation == nil && mmChatCompletion.mock.funcChatCompletion == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmChatCompletion.mock.afterChatCompletionCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmChatCompletion.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ChatCompletion implements Provider
func (mmChatCompletion *ProviderMock) ChatCompletion(ctx context.Context, req *openai.ChatCompletionNewParams) (cp1 *types.ChatCompletionResponse, err error) {
	mm_atomic.AddUint64(&mmChatCompletion.beforeChatCompletionCounter, 1)
	defer mm_atomic.AddUint64(&mmChatCompletion.afterChatCompletionCounter, 1)

	mmChatCompletion.t.Helper()

	if mmChatCompletion.inspectFuncChatCompletion != nil {
		mmChatCompletion.inspectFuncChatCompletion(ctx, req)
	}

	mm_params := ProviderMockChatCompletionParams{ctx, req}

	// Record call args
	mmChatCompletion.ChatCompletionMock.mutex.Lock()
	mmChatCompletion.ChatCompletionMock.callArgs = append(mmChatCompletion.ChatCompletionMock.callArgs, &mm_params)
	mmChatCompletion.ChatCompletionMock.mutex.Unlock()

	for _, e := range mmChatCompletion.ChatCompletionMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cp1, e.results.err
		}
	}

	if mmChatCompletion.ChatCompletionMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmChatCompletion.ChatCompletionMock.defaultExpectation.Counter, 1)
		mm_want := mmChatCompletion.ChatCompletionMock.defaultExpectation.params
		mm_want_ptrs := mmChatCompletion.ChatCompletionMock.defaultExpectation.paramPtrs

		mm_got := ProviderMockChatCompletionParams{ctx, req}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmChatCompletion.t.Errorf("ProviderMock.ChatCompletion got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmChatCompletion.ChatCompletionMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.req != nil && !minimock.Equal(*mm_want_ptrs.req, mm_got.req) {
				mmChatCompletion.t.Errorf("ProviderMock.ChatCompletion got unexpected parameter req, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmChatCompletion.ChatCompletionMock.defaultExpectation.expectationOrigins.originReq, *mm_want_ptrs.req, mm_got.req, minimock.Diff(*mm_want_ptrs.req, mm_got.req))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmChatCompletion.t.Errorf("ProviderMock.ChatCompletion got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmChatCompletion.ChatCompletionMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmChatCompletion.ChatCompletionMock.defaultExpectation.results
		if mm_results == nil {
			mmChatCompletion.t.Fatal("No results are set for the ProviderMock.ChatCompletion")
		}
		return (*mm_results).cp1, (*mm_results).err
	}
	if mmChatCompletion.funcChatCompletion != nil {
		return mmChatCompletion.funcChatCompletion(ctx, req)
	}
	mmChatCompletion.t.Fatalf("Unexpected call to ProviderMock.ChatCompletion. %v %v", ctx, req)
	return
}

// ChatCompletionAfterCounter returns a count of finished ProviderMock.ChatCompletion invocations
func (mmChatCompletion *ProviderMock) ChatCompletionAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmChatCompletion.afterChatCompletionCounter)
}

// ChatCompletionBeforeCounter returns a count of ProviderMock.ChatCompletion invocations
func (mmChatCompletion *ProviderMock) ChatCompletionBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmChatCompletion.beforeChatCompletionCounter)
}

// Calls returns a list of arguments used in each call to ProviderMock.ChatCompletion.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmChatCompletion *mProviderMockChatCompletion) Calls() []*ProviderMockChatCompletionParams {
	mmChatCompletion.mutex.RLock()

	argCopy := make([]*ProviderMockChatCompletionParams, len(mmChatCompletion.callArgs))
	copy(argCopy, mmChatCompletion.callArgs)

	mmChatCompletion.mutex.RUnlock()

	return argCopy
}

// MinimockChatCompletionDone returns true if the count of the ChatCompletion invocations corresponds
// the number of defined expectations
func (m *ProviderMock) MinimockChatCompletionDone() bool {
	if m.ChatCompletionMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ChatCompletionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ChatCompletionMock.invocationsDone()
}

// MinimockChatCompletionInspect logs each unmet expectation
func (m *ProviderMock) MinimockChatCompletionInspect() {
	for _, e := range m.ChatCompletionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProviderMock.ChatCompletion at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterChatCompletionCounter := mm_atomic.LoadUint64(&m.afterChatCompletionCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ChatCompletionMock.defaultExpectation != nil && afterChatCompletionCounter < 1 {
		if m.ChatCompletionMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ProviderMock.ChatCompletion at\n%s", m.ChatCompletionMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ProviderMock.ChatCompletion at\n%s with params: %#v", m.ChatCompletionMock.defaultExpectation.expectationOrigins.origin, *m.ChatCompletionMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcChatCompletion != nil && afterChatCompletionCounter < 1 {
		m.t.Errorf("Expected call to ProviderMock.ChatCompletion at\n%s", m.funcChatCompletionOrigin)
	}

	if !m.ChatCompletionMock.invocationsDone() && afterChatCompletionCounter > 0 {
		m.t.Errorf("Expected %d calls to ProviderMock.ChatCompletion at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ChatCompletionMock.expectedInvocations), m.ChatCompletionMock.expectedInvocationsOrigin, afterChatCompletionCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ProviderMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockChatCompletionInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ProviderMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ProviderMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockChatCompletionDone()
}
